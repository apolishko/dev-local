plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'org.flywaydb.flyway' version '9.22.3'
    id 'nu.studer.jooq' version '8.2'
    id 'jacoco'
}

group = 'com.pearson'
version = '0.1.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'

    // OAuth2 and OIDC support
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    jooqGenerator 'org.postgresql:postgresql'

    // Excel handling
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'

    // AWS SDK for S3
    implementation 'software.amazon.awssdk:s3:2.20.157'

    // JWT handling
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.37.3'

    // Environment variables support
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'

    // WireMock for mock authentication server (Spring Boot 3 compatible)
    implementation 'com.github.tomakehurst:wiremock-jre8-standalone:2.35.0'

    // Micrometer for metrics
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:postgresql:1.18.3'
    testRuntimeOnly 'com.h2database:h2'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
}

test {
    useJUnitPlatform()
    jvmArgs = [
        '-Dnet.bytebuddy.experimental=true'
    ]
    finalizedBy jacocoTestReport
}

// Load environment variables from .env file FIRST
def loadEnvFile() {
    def envFile = file('.env')
    if (envFile.exists()) {
        println "Loading .env file: ${envFile.absolutePath}"
        envFile.readLines().each { line ->
            if (line && !line.startsWith('#') && line.contains('=')) {
                def parts = line.split('=', 2)
                if (parts.length == 2) {
                    def key = parts[0].trim()
                    def value = parts[1].trim()
                    System.setProperty(key, value)
                    println "Set property: ${key} = ${value}"
                }
            }
        }
    } else {
        println "No .env file found at: ${envFile.absolutePath}"
    }
}

// Load .env file immediately
loadEnvFile()

// Now get properties with fallbacks
def dbUrl = System.getProperty('DATABASE_URL')
def dbUser = System.getProperty('DATABASE_USERNAME')
def dbPassword = System.getProperty('DATABASE_PASSWORD')
def dbSchema = System.getProperty('DATABASE_SCHEMA')

println "Using database URL: ${dbUrl}"
println "Using database user: ${dbUser}"
println "Using database schema: ${dbSchema}"

// JOOQ code generation configuration
jooq {
    version = '3.18.4'
    edition = nu.studer.gradle.jooq.JooqEdition.OSS

    configurations {
        main {
            generateSchemaSourceOnCompilation = false

            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = dbUrl
                    user = dbUser
                    password = dbPassword
                }

                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'

                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        includes = '.*'
                        excludes = 'flyway_schema_history'
                    }

                    target {
                        packageName = 'com.pearson.pce.jooq'
                        directory = 'src/main/jooq'
                    }

                    strategy {
                        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                    }
                }
            }
        }
    }
}

// Flyway configuration
flyway {
    url = dbUrl
    user = dbUser
    password = dbPassword
    schemas = [dbSchema]
    locations = ['classpath:db/migration']
}

// Task to clean and rebuild
task cleanBuild(dependsOn: [clean, build]) {
    description = 'Clean build directory and build the project'
}

task migrateAndGenerate(dependsOn: ['processResources', 'flywayMigrate', 'generateJooq']) {
    description = 'Run Flyway migrations and generate JOOQ code'
}

task flywayCleanEnabled(type: org.flywaydb.gradle.task.FlywayCleanTask) {
    cleanDisabled = false
}

tasks.named('flywayMigrate').configure {
    dependsOn 'processResources'
}

// Boot jar settings
bootJar {
    archiveFileName = 'pce-ss.jar'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/jooq'
        }
    }
}

jacocoTestReport {
  reports { html.required = true; xml.required = true }
  def excludes = [
    'com/pearson/pce/jooq/**',
    'com/pearson/pce/importjob/**',
    'com/pearson/pce/api/annotation/**',
    'com/pearson/pce/security/oidc/**',
    'com/pearson/pce/security/mock/**',
    'com/pearson/pce/service/**'
  ]
  classDirectories.setFrom(files(classDirectories.files.collect { fileTree(dir: it, exclude: excludes) }))
}
